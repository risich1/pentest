<?php
ob_end_clean();
require_once(__DIR__ . '/tcpdf/tcpdf.php');
require_once(__DIR__ . '/fpdi/src/autoload.php');
require_once(__DIR__ . '/../../includes/db.php');
use \setasign\Fpdi;
use \setasign\Fpdi\TcpdfFpdi;

class PDF extends Fpdi\TcpdfFpdi { 
    protected function add_fonts() {		
        // TCPDF_FONTS::addTTFfont('C:/xampp/htdocs/pkgod/admin/includes/tcpdf/fonts/tnr/times.ttf', 'TrueTypeUnicode', '', 96);
        TCPDF_FONTS::addTTFfont(__DIR__.'/tcpdf/fonts/tnr/times.ttf', 'TrueTypeUnicode', '', 96);
        //TCPDF_FONTS::addTTFfont(__DIR__.'/tcpdf/unifont/timesb.ttf', 'TrueTypeUnicode', '', 32);
        //TCPDF_FONTS::addTTFfont(__DIR__.'/tcpdf/unifont/timesi.ttf', 'TrueTypeUnicode', '', 32);
        //TCPDF_FONTS::addTTFfont(__DIR__.'/tcpdf/unifont/timesbi.ttf', 'TrueTypeUnicode', '', 32); 
    }

    protected function row_wordwrap_print($row_start, $row_end, $row_height, $text) {
        $words = preg_split("/[\s,]+/", $text);
        $cell_position = $row_start;
        $this->SetXY($row_start, $row_height);        
        foreach ($words as $word) {
            if ($cell_position + strlen($word) + 4 <= $row_end) {                
                $this->SetXY($cell_position, $row_height);
                $this->Write(8, $word);
                $cell_position = $cell_position + strlen($word) + 4;
            }
            else {
                $row_height += 4;
                $this->SetXY($row_start, $row_height);
                $this->Write(8, $word);
                $cell_position = $row_start + strlen($word) + 4;
            }
        }     
    }

    protected function column_wordwrap_print($column_start, $column_end, $column_width, $query_result) {

    }

    public function table_print($two_d_array) {
        $html_table='
            <style type="text/css">
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    text-align: center;
                    border: 2px solid #c0ccdc; 
                    padding: 10px;             
                }
                th {           
                    background-color: #e8f0fb;
                    color: #2b4e84;
                }
                td {
            
                }
            </style>
        ';
        $html_table.='<table>';
        foreach ($two_d_array as $row_table) {
            $html_table.='<tr>';
            foreach ($row_table as $cell_table) {
                $html_table.='<td>'.$cell_table.'</td>';
            }
            $html_table.='</tr>';
        }
        $html_table.='</table>';
        $this->writeHTML($html_table, true, false, true, false, '');
    }
}

class Sheet extends PDF {
    private $data;

    public function __construct() {
        parent::__construct(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);        
        if (method_exists($this, '__'.func_get_arg(0))) {
            call_user_func_array(array($this, '__'.func_get_arg(0)), func_get_args());
        }
    }

    private function __godovikov_sheet_1($sheet_name, Server $instance) {
        $student_id = htmlspecialchars($_GET["student_id"]);
        $treaty_customer = htmlspecialchars($_GET["treaty_customer"]);
        if (!is_numeric($student_id)) {
            printf("Parameter error: a sent parameter is not integer or it hasn't been sent at all\n");
            exit();
        }
		
        $query = str_replace('{$student_id}', $student_id, file_get_contents(__DIR__ .'/query_templates/query_godovikov_sheet_1.sql'));
        $data = $instance->get_query_record($query);  
        $this->put_data($data);
        unset($data); 
        unset($instance);
		
		$this->add_fonts();
		
        $this->SetFont('times', '', 10, '', false);
        $this->SetAutoPageBreak(TRUE, 0);
        $pageCount = $this->setSourceFile($sheet_name.'.pdf');
        if (!$pageCount) {
            printf("Sheet data error: a pdf file must be in the same directory with this script and its name must be equal '{$sheet_name}.pdf'\n");
            exit();
        }

        //first page
        $templateId = $this->importPage(1);
        $this->AddPage();
        $this->useTemplate($templateId, ['adjustPageSize' => true]);

        $this->SetXY(112, 8);             
        $this->Write(8, $this->data['sheet_id']);

        $this->SetXY(180, 24);                         
        $this->Write(8, date("d.m.Y", strtotime($this->data['treaty_date'])));
	
        if ($treaty_customer == 1) {
        $this->SetXY(79, 61);            
        $this->Write(8, $this->data['student_name']);
        }
	
        $this->SetXY(76, 110);
        $this->Write(8, $this->data['student_direction']);

        $this->SetXY(79, 124);            
        $this->Write(8, $this->data['student_name']);
        
        $this->SetXY(152, 141);            
        $this->Write(8, date("d.m.Y", strtotime($this->data['student_study_start'])));

        $this->SetXY(174, 141);
        $this->Write(8, date("d.m.Y", strtotime($this->data['student_study_end']))); 

        $this->SetXY(11, 146);
        $this->Write(8, $this->data['student_semesters']); 

        $this->SetXY(15, 159);          
        $this->Write(8, $this->data['direction_cost']*$this->data['student_semesters']);

        $this->SetXY(45, 159);          
        $this->Write(8, $this->data['written_sum_cost']);

        $this->SetXY(135, 233);           
        $this->Write(8, $this->data['student_qualification']);
        
        $this->SetXY(15, 259);           
        $this->Write(8, $this->data['direction_cost']);

        $this->SetXY(45, 259);           
        $this->Write(8, $this->data['written_cost']);
    
        $short_name = preg_split("/[\s,]+/", $this->data['student_name']);
        $swap = $short_name[1];
        $short_name[1] = $short_name[0];
        $short_name[0] = $swap;
        $swap = $short_name[1];
        $short_name[1] = $short_name[2];
        $short_name[2] = $swap;
        $chars_name = str_split_unicode($short_name[0]);
        $chars_patronymic = str_split_unicode($short_name[1]);
        $short_name[0] = $chars_name[0];
        $short_name[1] = $chars_patronymic[0];
        unset($swap);
        unset($chars_name);
        unset($chars_patronymic);
        $short_name = implode(".", $short_name);
        $short_name = preg_replace('/\.{2,}/', ".", $short_name); 
        if ($treaty_customer == 1) {
		$this->SetXY(60, 274);
		$this->Write(8, $short_name);
	}


        //second page
        $templateId = $this->importPage(2);
        $this->AddPage();
        $this->useTemplate($templateId, ['adjustPageSize' => true]);
    
        if ($treaty_customer == 1) {
		$this->SetXY(60, 274);
		$this->Write(8, $short_name);
	}


        //third page
        $templateId = $this->importPage(3);
        $this->AddPage();
        $this->useTemplate($templateId, ['adjustPageSize' => true]);
        if ($treaty_customer == 1) {
            $cells = preg_split("/[\s,]+/", $this->data['student_name']);
            $this->SetXY(90, 52);           
            $this->Write(8, $cells[0]);

            $this->SetXY(90, 56);           
            $this->Write(8, $cells[1]);

            $this->SetXY(90, 60);           
            $this->Write(8, $cells[2]);

            $cells = explode(',', $this->data['student_passport']);
            $this->SetXY(87, 73);           
            $this->Write(8, $cells[0]);

            $this->SetXY(105, 73);           
            $this->Write(8, $cells[1]);

            $cells = explode(' ', date("d m Y", strtotime($this->data['passport_date'])) );
            $this->SetXY(89, 77);
            $this->Write(8, $cells[0]); 

            $this->SetXY(99, 77);           
            $this->Write(8, $cells[1]);

            $this->SetXY(110, 77);           
            $this->Write(8, $cells[2]);

            $this->row_wordwrap_print(75, 130, 81, $this->data['passport_issue']);
        
            $this->row_wordwrap_print(75, 130, 98, $this->data['student_residence']);
        
            $this->SetXY(90, 123);           
            $this->Write(8, $this->data['student_mail']);

            $this->SetXY(92, 135);           
            $this->Write(8, $this->data['student_phone']);
        }

        $cells = preg_split("/[\s,]+/", $this->data['student_name']);
        $this->SetXY(152, 52);           
        $this->Write(8, $cells[0]);

        $this->SetXY(152, 56);           
        $this->Write(8, $cells[1]);

        $this->SetXY(152, 60);           
        $this->Write(8, $cells[2]);

        $cells = explode(',', $this->data['student_passport']);
        $this->SetXY(149, 73);           
        $this->Write(8, $cells[0]);

        $this->SetXY(167, 73);           
        $this->Write(8, $cells[1]);

        $cells = explode(' ', date("d m Y", strtotime($this->data['passport_date'])) );
        $this->SetXY(152, 77);
        $this->Write(8, $cells[0]); 

        $this->SetXY(161, 77);           
        $this->Write(8, $cells[1]);

        $this->SetXY(172, 77);           
        $this->Write(8, $cells[2]);

        $this->row_wordwrap_print(137, 192, 81, $this->data['passport_issue']);
        
        $this->row_wordwrap_print(137, 192, 98, $this->data['student_residence']); 

        $this->SetXY(152, 123);           
        $this->Write(8, $this->data['student_mail']);

        $this->SetXY(154, 135);           
        $this->Write(8, $this->data['student_phone']);
    }

    private function put_data($db_data) {
        $this->data = $db_data;        
        if (!$this->data) {
            printf("Sheet data error: didn't get data from database\n");
            exit();
        }
    }

    public function print_data() {        
        $this->Output(); 
    }
}

class Server {
    private $open_link;
    private $close_link;

    public function __construct() {      
        if (method_exists($this, '__connect_'.func_get_arg(0))) {
            call_user_func(array($this, '__connect_'.func_get_arg(0)));
        }
    }

    private function __connect_db() {
        global $connection;
        call_user_func(array($this, 'close_connect_if_exist'));
        $this->open_link = $connection;
        $this->open_link->set_charset("utf8");
        call_user_func(array($this, 'check_connect'));        
    }

    private function close_connect_if_exist() {
        if ($this->open_link) {
            call_user_func(array($this, 'disconnect'));
        }
    }

    private function check_connect() {
        if ($this->open_link->connect_error) {
            printf("Server connection failed: %s\n", $this->open_link->connect_error);
            exit();
        }
    }    
    
    private function disconnect() {
        $this->close_link = $this->open_link->close();        
        if (!$this->close_link) {
            printf("Server disconnection failed: there was not an open connection with database\n");
            exit();
        }
    }

    public function get_query_record($query) {
        $query_record = $this->open_link->query($query);
        if (!$query_record) {
            printf("Server query error: there is not an open connection with database or there weren't record obtained from query\n");
            exit();
        }
        return $query_record->fetch_assoc();
    }

    public function get_query_datatable($query) {
        $query_data = $this->open_link->query($query);
        $line = array();
        $table = array();
        $rows = 0;
        $columns = 0;
        $cells = 0;
        if (!$query_data) {
            printf("Server query error: there is not an open connection with database or there weren't data obtained from query\n");
            exit();
        }
        while ($row = mysqli_fetch_row($query_data)) {
            foreach ($row as $cell) {
                $line[] = $cell;
                $cells++;
            }
            $rows++;
        }
        $columns = $cells / $rows;  
        foreach ($line as $number => $cell) {
            $table[floor($number / $columns)][$number++ % $columns] = $cell;
        }      
        return $table;
    }

}


function str_split_unicode($str, $length = 1) {
    $tmp = preg_split('~~u', $str, -1, PREG_SPLIT_NO_EMPTY);
    if ($length > 1) {
        $chunks = array_chunk($tmp, $length);
        foreach ($chunks as $i => $chunk) {
            $chunks[$i] = join('', (array) $chunk);
        }
        $tmp = $chunks;
    }
    return $tmp;
}


function main() {
    $Server_anomiir = new Server('db');
    $sheet_godovikov = new Sheet('godovikov_sheet_1', $Server_anomiir);
    $sheet_godovikov->SetTitle('Sheet_'.date("h-i-s_d-m-Y"));   
    $sheet_godovikov->print_data();
}

main();