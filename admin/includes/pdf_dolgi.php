<?php
include_once ('../../includes/db.php'); 
require_once(__DIR__ . '/tfpdf/tfpdf.php');

class PDF extends tFPDF {

    function LoadData() {
        
        global $connection;
        $session_id = $_GET["session_id"];
        $group_id = $_GET["group_id"];
        $plan_id = $_GET["plan_id"];
        $course_id = $_GET["course_id"];

        $session_id = htmlspecialchars($session_id);
        $group_id = htmlspecialchars($group_id);
        $plan_id = htmlspecialchars($plan_id);
        $course_id = htmlspecialchars($course_id);

        if (!is_numeric($session_id) OR !is_numeric($group_id) OR !is_numeric($plan_id) OR !is_numeric($course_id)) {
            die("Ошибка параметров");
        }
        //clg_course.shortname AS course_name,
        $query="
            SELECT
                asu_grades.grade_id AS grade_id,
                CEIL(asu_enrollee.current_sem/2) AS student_course,
                CONCAT(clg_user.lastname,' ',clg_user.firstname) AS student_name,
                
                asu_enrollee.enrollee_id AS student_number,
                CONCAT(asu_enrollee.enrollee_surname,' ',asu_enrollee.enrollee_name,' ',asu_enrollee.enrollee_patronymic) enrollee_name,
                
                asu_groups.group_number AS student_group,
                CONCAT(asu_directions.direction_code,' ',asu_directions.direction_title) AS student_direction,
                CONCAT(asu_teacher.teacher_surname,' ',asu_teacher.teacher_name,' ',asu_teacher.teacher_patronymic) AS teacher_name,
                asu_disciplines.discipline_title AS course_name,
                asu_grades.grade AS course_grade,
                CONCAT(asu_session.session_period,' ',asu_session.session_time) AS course_session,
                asu_session.session_id,
                asu_groups.group_id,
                asu_academic_plan.academic_plan_id,
                clg_course.id

            FROM
                asu_grades

            LEFT JOIN clg_user
                ON asu_grades.moodle_student_id = clg_user.id

            LEFT JOIN asu_enrollee
                ON clg_user.id = asu_enrollee.moodle_id

            LEFT JOIN asu_groups
                ON asu_enrollee.enrollee_group_id = asu_groups.group_id

            LEFT JOIN asu_academic_plan
                ON asu_groups.group_ac_plan_id = asu_academic_plan.academic_plan_id
            LEFT JOIN asu_directions
                ON asu_academic_plan.academic_plan_direction_id = asu_directions.direction_id

            LEFT JOIN clg_course
                ON clg_course.id = asu_grades.moodle_course_id

            LEFT JOIN asu_load_teacher
                ON asu_grades.moodle_course_id = asu_load_teacher.discipline_moodle_id
            LEFT JOIN asu_teacher
                ON asu_load_teacher.teacher_id = asu_teacher.teacher_id

            LEFT JOIN asu_content_discipline
                ON (
                    asu_content_discipline.content_discipline_ac_plan_id = asu_academic_plan.academic_plan_id
                    AND
                    clg_course.id = asu_content_discipline.moodle_id
                   ) 
            LEFT JOIN asu_session
                ON asu_content_discipline.content_discipline_session = asu_session.session_id
            LEFT JOIN asu_disciplines
                ON asu_content_discipline.content_discipline_d_id = asu_disciplines.discipline_id

            WHERE
                asu_session.session_id = {$session_id}
                AND asu_groups.group_id = {$group_id}
                AND asu_academic_plan.academic_plan_id = {$plan_id}
                AND clg_course.id = {$course_id}

                AND (
                    (asu_grades.grade NOT IN('н/я','Незачёт','2 (неуд.)','-')
                    OR
                    asu_grades.coursework_grade NOT IN('н/я','Незачёт','2 (неуд.)','-'))
                    AND
                    (STR_TO_DATE(DATE_FORMAT(asu_grades.grade_date, '%m/%d/%Y'), '%m/%d/%Y') > asu_session.session_end)
                    AND (
                        STR_TO_DATE(DATE_FORMAT(asu_grades.grade_date, '%m/%d/%Y'), '%m/%d/%Y') >= '2019-01-25'
                        AND
                        STR_TO_DATE(DATE_FORMAT(asu_grades.grade_date, '%m/%d/%Y'), '%m/%d/%Y') <= '2019-02-01'
                    )
                )

                AND asu_enrollee.enrollee_status = 'Студент'

            ORDER BY
                course_name, student_direction, student_name, course_grade
        ";
/*
        AND (
                    asu_grades.grade NOT IN('н/я','Незачёт','2 (неуд.)','-')
                    OR
                    asu_grades.coursework_grade NOT IN('н/я','Незачёт','2 (неуд.)','-')
                )
*/
        /*
        AND STR_TO_DATE(DATE_FORMAT(asu_grades.grade_date, '%m/%d/%Y'), '%m/%d/%Y') > DATE_ADD(asu_session.session_end, INTERVAL 14 DAY)
                AND (asu_grades.grade_date NOT BETWEEN '2018-06-26' AND '2018-06-28')
        */
        $result = mysqli_query($connection, $query);

        $lines = array();
        $rows='';
        $row_number=1;
        $previous_row='';
        while($row = mysqli_fetch_assoc($result)) { 
            if ($row['course_name'] != $previous_row) {
                $row_number = 1;
                $previous_row = $row['course_name'];
            }
            $rows = $row['course_name'].'; '.$row['student_course'].'; '.$row['student_group'].'; ';
            $rows .= $row['student_direction'].'; '.$row['teacher_name'].'; ';
            $rows .= $row_number.'.; '.$row['enrollee_name'].'; '.$row['student_number'].'; '.$row['course_grade'].'; ';
            $rows .= '  ';
            $lines[]=$rows;
            $row_number+=1;
        }
        
        $data = array();
        foreach($lines as $line) {
            $data[] = explode(';', trim($line));
        }

        mysqli_close($connection);

        return $data;
    }
    
    function BasicTable($data) {
        $this->Ln();
        $course='';
        foreach($data as $index => $row) {        
            foreach($row as $number => $col) {
                if ($number <= 4  &&  $data[$index][0] != $course) {
                    switch ($number) {
                        case 0:
                            $this->AddPage();
                            print_vedomost_title($this);
                            $this->SetFont('Times','', 12); 
                            $this->Cell(100, 7, 'По предмету: '.$col);
                            $this->Ln();
                            break;
                        case 1:
                            $this->Cell(15, 7, $col.' курса');
                            break;
                        case 2:
                            $this->Cell(70, 7, $col.' группы');
                            $this->Ln();
                            break;
                        case 3:
                            $this->Cell(100, 7, 'Специальность '.$col);
                            $this->Ln();
                            break;
                        case 4:
                            $this->Cell(100, 7, 'Экзаменатор '.$col);
                            $course = $data[$index][0];
                            $this->Ln(10);
                            $this->Cell(115, 7, '');
                            $this->Cell(100, 7, '«_____» _________________ 20___ года');
                            $this->Ln(15);
                            $this->Cell(15, 9, '№ n/n', 1);
                            $this->Cell(105, 9, 'Фамилия, имя, отчество студента', 1);
                            $this->Cell(20, 9, 'Шифр', 1);
                            $this->Cell(20, 9, 'Оценка', 1);
                            $this->Cell(30, 9, 'Подпись', 1);
                            $this->Ln(9);
                            break;
                    } 
                }
                else if ($number > 4) {
                    switch ($number) {
                        case 5:
                            $this->Cell(15, 9, $col, 1);
                            break;
                        case 6:
                            $this->Cell(105, 9, $col, 1);  
                            break;
                        case 7:
                            $this->Cell(20, 9, $col, 1);  
                            break;
                        case 8:
                            $this->Cell(20, 9, $col, 1);  
                            break;
                        case 9:
                            $this->Cell(30, 9, $col, 1);  
                            break;
                    }
                }
            }
            $this->Ln();
        }
        $this->Ln();
        //$this->Cell(94, 7, '');
        $this->Cell(20, 7, 'Начальник ОДО  ________________/ Солдатов В.Ф. /');
        $this->Ln();
    }
}


$pdf = new PDF();
$pdf->SetTitle('Vedomost');
function add_fonts($pdf) {
    $pdf->AddFont('Times', '', 'times.ttf', true);
    $pdf->AddFont('TimesBold', '', 'timesbd.ttf', true);
    $pdf->AddFont('TimesItalic', '', 'timesi.ttf', true);
    $pdf->AddFont('TimesBoldItalic', '', 'timesbi.ttf', true);
}
add_fonts($pdf);

function print_vedomost_title($pdf) {
    $pdf->SetFont('TimesBoldItalic', '', 12);
    $txt=['Государственное бюджетное профессиональное','образовательное учреждение города Москвы','«Политехнический колледж им. Н.Н. Годовикова»'];
    foreach ($txt as $line) {
        $pdf->Cell(200, 7, $line, 0, 0, 'C');
        $pdf->Ln();
    }
    $pdf->Ln(5);
    $pdf->SetFont('TimesBold','', 16);
    $txt='Экзаменационная (зачетная) ведомость';
    $pdf->Cell(200, 7, $txt, 0, 0, 'C');
    $pdf->Ln(10);
}

$data = $pdf->LoadData();
$pdf->BasicTable($data);
$pdf->Output();

?>